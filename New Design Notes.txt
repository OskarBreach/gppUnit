New Design Notes

#$001	TestCase
	Interface where setup and teardown are virtual concrete empty methods.
	test() is just pure virtual.
	Sample TestCase can be called through the interface.
	
#$002	Runner
	Run the three methods of one test instance.
	There is not yet an idea of setup failing.

#$003	Run multiple tests
	Iterate through 2 or more test cases

#$004	Report Test Results
	Every method can report any number of Test Results
	Report the result through an interface. (Goes to notification)

#$005	Report starting and ending each method
	Report contains a method description:
	Name and number of results
	
#$006	Time individual methods
	Report the time through a separate interface. (Goes to description)
	Introduce an interface so that tests can supply a nominal time value,
	but real code can use a real timer.
	Description now reports name, number of results and time.

$007	Test Result has full report
	Test Result consists of:
		boolean - summary
		tag msg - optional message from programmer
		description - automatically produced description of test.
	
$008	Catch exceptions from all methods
	Return a bool to indicate No Exception(true), Exception Caught(false)
	(Future, allow a client to add their own catch clause).
	Report the exception text through a separate interface. (Goes to notification)
	Exceptions do not stop the time being reported on each method.

$009	Avoid running the test if setup catches an exception.

$010	Report each method to ClassDescription
	After method is notified, it can be collected by ClassDescription

$011	Report each class
	The description reported has class name, number of methods run (2 or 3)
	Plus accumulated time, plus number of test results.
	Class name should be sufficiently demangled.
		I will want to separate the namespace from the test name.
		This could allow 'collecting' tests within suites.

$012	Report whole project
	The description reported has project name, number of classes
	Plus accumulated time, plus number of test results.
	Plus elapsed time.

$013	Auto-Collect tests
	Tests can be collected to a global vector.
	Global runner supplies them to a project and runs them

$014	Auto Options
	Create a default options free function which supplies a console notification.
	(This function can be overridden at link time by the user)
	It should be possible for the user to supply:
		Project Name.
		A number of Notifications.
		Exception catchers which describe themselves.

$015	Hamcrest style matchers (I)
	Add TestResult so that automated results can describe themselves
	
$016	Hamcrest style matchers (II)
	Add TestResult so that automated results can describe themselves

Infrastructure
#	Hudson
		Create a new job (copy previous one)
#	Scons
		Working from command line
	cppCheck
		Just use batch command from Hudson
	AStyle
		Needs to be command line only, but checked-in
		Copy astyle.options to src



#	ReportTime interface
.	MethodTimer interface
.		Test impl
.		Win32 impl
.		Win32 test
		unix impl
		unix test
		
